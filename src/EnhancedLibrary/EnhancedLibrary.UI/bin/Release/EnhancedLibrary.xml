<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnhancedLibrary</name>
    </assembly>
    <members>
        <member name="T:EnhancedLibrary.Utilities.Business.MicrosoftWord">
            <summary>
                Provide static methods to manipulate word files
            </summary>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.MicrosoftWord.PerformReplaces(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Copy a new file from srcFilename to destFilename and replaces all occurrences in the keys of the dictionary by their values.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Business.StringExtensions">
            <summary>
                Extends the behavior of the String interface
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.ToNullable``1(System.String)">
            <summary>
                Try parse the string value to specific struct.
            </summary>
            <returns>If the string is empty or null return nullable of TValue, otherwise return a nullable that is not null and contains the value</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.To``1(System.String)">
            <summary>
                Try parse the string value to specific struct type
            </summary>
            <returns>The value of the string in the desired type</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.Frmt(System.String,System.Object[])">
            <summary>
                Format the current string in the same way as the String.Format
            </summary>
            <returns>The currently string after formatted</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.ToArray``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Convert a sequence of strings to a sequence of T
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.IsNE(System.String)">
            <summary>
                Checks if the current string is null or is empty
            </summary>
            <returns>true if is null or empty, otherwise false</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.AddAtEnd_If_NotAtTheEnd(System.String,System.String)">
            <summary>
                Adds EndString to the end of the string if the string doesn't finish with that string.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.RemoveAtEnd_If_AtTheEnd(System.String,System.String)">
            <summary>
                Remove EndString to the end of the string if the string finish with that string.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Allow you to check if a substring is within the source string with a specific StringComparison rule
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.LinkedListExtensions.GetIndex``1(System.Collections.Generic.LinkedList{``0},System.Int32)">
            <summary>
                Get the index node within the list.
                This method has a O(N) performance, where N is the index.
                
            </summary>
            <exception cref="T:System.InvalidOperationException">When Count of the list is 0</exception>
            <exception cref="T:System.IndexOutOfRangeException">Index &gt;= list.Count</exception>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.Enums.ToEnum``2(``1)">
            <summary>
                Convert the TValue value to TEnum type
            </summary>
            <returns>TEnum type based on the TValue value</returns>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.Query``1">
            <summary>
                Allow Queries with LINQ to Entities throught IQueryable interface
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Teste</returns>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.Insert``1(``0)">
            <summary>
                Insert the e object in specific table.
                The inserted object is only on database after Synchronize was called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.Delete``1(``0)">
            <summary>
                Delete the e object from specific table.
                The deleted object is only removed from database after Synchronize was called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.Synchronize">
            <summary>
                Synchronize the database with all pending operations.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.Dispose">
            <summary>
                Free all managed resources such the connection and ObjectContext associated with the repository
            </summary>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.IRepositoryPattern.RepositoryConnection">
            <summary>
                Get the connection to the repository
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.BindGrid``1(Infragistics.Win.UltraWinGrid.UltraGrid,System.Collections.Generic.IList{``0})">
            <summary>
                Binds a list of TItems to the grid.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.SetDataBinding``1(Infragistics.Win.UltraWinGrid.UltraGrid,System.Collections.Generic.IList{``0})">
            <summary>
                Binds a list of TItems to the grid.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.ActiveRowRefresh(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
                Activate the active row again.
                This method can be util if you have an event that fires when an active row becames active.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.GetSelectedObject``1(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
                Returns the selected object that are selected in the grid
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.Clear``1(Infragistics.Win.UltraWinGrid.UltraGrid)">
            <summary>
                Clears the content of the current grid
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.ExportExcel(Infragistics.Win.UltraWinGrid.UltraGrid,System.String,System.Boolean)">
            <summary>
            Exports an UltraGrid data to an Excel document
            </summary>
            <param name="grid">UltraGrid</param>
            <param name="excelFilePath">excel document full file path</param>
            <param name="displayHiddenColumns">set if hidden columns will be included in the excel file</param>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraGridExtensions.GetHeaderColumns(Infragistics.Win.UltraWinGrid.UltraGrid,System.Boolean)">
            <summary>
                Returns a List of UltraGridColumns that are visible
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraComboEditorExtensions.GetStringValue(Infragistics.Win.UltraWinEditors.UltraComboEditor)">
            <summary>
                Get the property Value from editor casted to TValue
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraComboEditorExtensions.SetDefaultDisplayAndValueMember(Infragistics.Win.UltraWinEditors.UltraComboEditor)">
            <summary>
                Set default ValueMember to "ID" and DisplayMember to "Descricao"
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraComboEditorExtensions.DataBind``1(Infragistics.Win.UltraWinEditors.UltraComboEditor,System.Collections.Generic.IList{``0})">
            <summary>
                Set items on the DataSource.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraComboEditorExtensions.SelectDescription``1(Infragistics.Win.UltraWinEditors.UltraComboEditor,System.Collections.Generic.IList{``0},System.String)">
            <summary>
                Binds the items to the DataSource, and select the Description Value
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.UltraComboEditorExtensions.Unselect(Infragistics.Win.UltraWinEditors.UltraComboEditor)">
            <summary>
                Unselects the current selected item
                Does the same as SelectedIndex = -1
            </summary>
            <param name="dropdown"></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.#ctor(System.String)">
            <summary>
                Initialize ObjectMapper with specified connectionString and with a default command timeout of 30 seconds
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.#ctor(System.Data.Common.DbConnection)">
            <summary>
                Initialize ObjectMapper with specified connection and with a default command timeout of 30 seconds
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.#ctor(System.Data.Common.DbConnection,System.Int32)">
            <summary>
                Initialize ObjectMapper with specified connection and with specified command timeout
            </summary>
            <param name="connection"></param>
            <param name="commandTimeout"></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Select``1(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
                Maps the result set to a list of T by convention, and leave the possibility to pass the commandType, commandText and DbParameters.
            </summary>
            <typeparam name="T">The type of the object that you want to Map</typeparam>
            <param name="commandType">The type of the command</param>
            <param name="commandText">If using stored procedure, must be the stored procedure name, otherwise the dynamic sql</param>
            <param name="parameters">The parameters that command use. (optional)</param>
            <returns>A list of objects with their properties filled that aren't annotated with [Exclude] attribute</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Select``1">
            <summary>
                Maps the table from database to a list of T by convention.
            </summary>
            <typeparam name="T">The type of the object that you want to Map</typeparam>
            <returns>A list of objects with their properties filled that aren't annotated with [Exclude] attribute</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Maps the table from database to a list of T by convention that satisfy the filter.
            </summary>
            <typeparam name="T">The type of the object that you want to Map</typeparam>
            <param name="filter">The filter that you must use to filter a sub part of the result</param>
            <returns>A list of objects with their properties filled that aren't annotated with [Exclude] attribute</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Insert``1(``0)">
            <summary>
                Inserts the object on database and update the identity property in CLR object (if annotated with)
                The property annotated with Identity Attribute is ignored on insert command.
            </summary>
            <typeparam name="T">The type of the object that you want to insert</typeparam>
            <param name="obj">The object that you want to insert</param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Update``1(``0)">
            <summary>
                Based on primary key of the type, update the object on database
            </summary>
            <typeparam name="T">The type of the object that you want to update. Note: This type must be annotated with [Key]</typeparam>
            <param name="obj">The object that you want to update</param>
            <returns>The number of affected rows in database</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Delete``1(``0)">
            <summary>
                Based on primary key of the type, delete the object from database
            </summary>
            <typeparam name="T">The type of the object that you want to delete. Note: This type must be annotated with [Key]</typeparam>
            <param name="obj">The object that you want to delete</param>
            <returns>The number of affected rows in database</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.ExecuteProc``1(``0,EnhancedLibrary.Utilities.DataAccess.SPMode,System.String)">
            <summary>
                Build DbParameters that match with the mode and execute the stored procedure.
                All stored procedures must have the same name of parameters for all modes when using this method.
            </summary>
            <typeparam name="T">The type that must have their properties annotated with [StoredProc]</typeparam>
            <param name="obj">The object that you want to retrieve the information and build sql parameters dynamically based on their values</param>
            <param name="mode">The mode of the procedure</param>
            <param name="procedureName">The name of the procedure</param>
            <returns>The number of affected rows in database</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Execute(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
                Execute the query on the database.
            </summary>
            <param name="commandType">The type of the command</param>
            <param name="commandText">If using stored procedure, must be the stored procedure name, otherwise the dynamic sql</param>
            <param name="parameters">The parameters that command use. (optional)</param>
            <returns>The number of affected rows in database</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
                Execute the query on the database.
            </summary>
            <param name="commandType">The type of the command</param>
            <param name="commandText">If using stored procedure, must be the stored procedure name, otherwise the dynamic sql</param>
            <param name="parameters">The parameters that command use. (optional)</param>
            <returns>The first column of the first row in the ResultSet returned by the query</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Dispose">
            <summary>
              Free the DbConnection associated with the ObjectMapper  
            </summary>
        </member>
        <member name="P:EnhancedLibrary.Utilities.DataAccess.ObjectMapper.Connection">
            <summary>
                Returns the connection that ObjectMapper is associated
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.CheckedListBoxAdapter.Checked">
            <summary>
                If true, enable all items. 
                Otherwise, disable all items
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.CheckedListBoxAdapter.CheckedIndices">
            <summary>
                Return all indices from the checkedListbox that are checked
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.CheckedListBoxAdapter.UncheckedIndices">
            <summary>
                Return all indices from the checkedListbox that are unchecked
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.CheckedListBoxAdapter.CheckedListBox">
            <summary>
                Get or sets the CheckedListBox object associated
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Graphics.ControlExtensions">
            <summary>
                Extends the behavior of Control interface
            </summary>
            
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.ControlExtensions.AddChilds(System.Windows.Forms.Control,System.Windows.Forms.Control[])">
            <summary>
                Allows you to add a variable number of controls to the context control.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Graphics.ControlExtensions.GetTag``1(System.Windows.Forms.Control)">
            <summary>
                Get the tag from the control and receive a generic type argument to cast to.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern">
            <summary>
                By inherit from this class, you get the Repository Pattern to query the datasource.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.Query``1">
            <summary>
                Allow Queries with LINQ to Entities throught IQueryable interface
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.Insert``1(``0)">
            <summary>
                Insert the e object in specific table.
                The inserted object is only on database after Synchronize was called.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.Delete``1(``0)">
            <summary>
                Delete the e object from specific table.
                The deleted object is only removed from database after Synchronize was called.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.Synchronize">
            <summary>
                Synchronize the database with all pending operations.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.Dispose">
            <summary>
                Free all managed resources such the connection and ObjectContext associated with the repository
            </summary>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.RepositoryPattern.RepositoryConnection">
            <summary>
                Get the connection to the repository
            </summary>
        </member>
        <member name="T:EnhancedLibrary.UIControls.SearchableDbCombo">
            <summary>
                Gives to the client, a range of results that the text inserted in the control 
                is contained in a specific column of a specific table for that connectionString.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.UIControls.SearchableDbCombo.LoadAllData">
            <summary>
                Loads all data into the combobox
            </summary>
        </member>
        <member name="M:EnhancedLibrary.UIControls.SearchableDbCombo.LoadSpecificData">
            <summary>
                Loads only a portion of the data into the combobox
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.SearchableDbCombo.ConnectionString">
            <summary>
                ConnectionString to database
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.SearchableDbCombo.TableName">
            <summary>
                The name of the table in the database, where the search is done
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.SearchableDbCombo.ColumnName">
            <summary>
                The name of the column of the table, where the search is done
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.SearchableDbCombo.HasEnrollmentBehavior">
            <summary>
                If enabled, dashes will be inserted automatically, eg: 11-MM-22
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.SearchableDbCombo.LoadingText">
            <summary>
                If setted, the text will appear when the combo will be loading the data into memory
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.ObjectContextAutoHistory`1">
            <summary>
                Create instances of this class when you don't want to delete items from database, and when you insert, update or delete,
                update specific columns in a table
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.ObjectContextAutoHistory.ObjectContextAutoHistory`1.Context">
            <summary>
                Get the ObjectContext object associated with the instance
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.Clear">
            <summary>
                Removes all properties
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.TryGetValue(System.String,System.Object@)">
            <summary>
                Try to get the value of the property.
            </summary>
            <param name="result">out parameter that contains null or the value of the property if property was found or not</param>
            <returns>true if property was found. Otherwise return false</returns>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.SetPropertyValueAndEvent(System.String,System.Object,System.Action{System.String,System.Object})">
            <summary>
                Set the property value and a method that is called before the value changed
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.SetPropertyValueAndEvent(System.String,System.Object,System.Action{System.String,System.Object},System.Action{System.String,System.Object})">
            <summary>
                Set the property value and a method that is called after the value changed
            </summary>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.Properties">
            <summary>
                Get the dictionary that represents the name of the properties and their values in runtime 
            </summary>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.DynamicData.IDynamicObject.Item(System.String)">
            <summary>
                Get or set the value of some property
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.DynamicObject.GetNode(System.String)">
            <summary>
                Return null if property is not found. Otherwise return the node that contains the property
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.DynamicObject.Clear">
            <summary>
                Removes all properties
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExternalTypes.DynamicData.DynamicObject.TryGetValue(System.String,System.Object@)">
            <summary>
                Try to get the value of the property.
            </summary>
            <param name="result">out parameter that contains null or the value of the property if property was found or not</param>
            <returns>true if property was found. Otherwise return false</returns>
        </member>
        <member name="P:EnhancedLibrary.ExternalTypes.DynamicData.DynamicObject.Properties">
            <summary>
                Get the dictionary that represents the name of the properties and their values in runtime 
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.IDbConnectionExtensions.StartEntityFrameworkTransaction(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
                Try to start a transaction, with a specified isolation level, in a context of an entity framework connection.
                You must explicitly commit the transaction when you're done
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.IDbConnectionExtensions.StartEntityFrameworkTransaction(System.Data.IDbConnection)">
            <summary>
                Try to start a transaction in a context of an entity framework connection.
                You must explicitly commit the transaction when you're done
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.DateTimeExtensions.GetLastDay(System.DateTime)">
            <summary>
                Gets a new Date at the last day of the current month of the date
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExternalTypes.DropDownListItem`1">
            <summary>
                Represents an identifier and his description.
                Typically instances of this class are build to be used in combobox's;
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.DataAccess.EntityTransactionExtensions">
            <summary>
                Extends the behavior of the EntityTransaction class.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.EntityTransactionExtensions.GetSqlTransaction(System.Data.EntityClient.EntityTransaction)">
            <summary>
                Get SqlTransaction that entityTransaction object is associated with.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.DataAccess.CustomDbParameter">
            <summary>
                Create instances of this type, when you don't care about setting the type of
                the DbParameter. 
                Call ToDbParameters in a Array of this instances, and the method will take care about setting the
                correct type.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.DbParametersExtensions.ToDbParameters(EnhancedLibrary.ExtensionMethods.DataAccess.CustomDbParameter[])">
            <summary>
                Convert CustomDbParameters array to SqlParameters array and 
                where the value of the parameter is null or a empty string sets the value to DBNull.Value.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.DbParametersExtensions.IsNullableRef``1(System.Object@)">
            <summary>
                Check if the o object is a T nullable type.
                If not, simply return.
                If is, see if contains the value. If not, set DbNull.Value, otherwise 
                set the current Value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.DateDependenciesValidator`1.AddDependency(Infragistics.Win.UltraWinEditors.UltraDateTimeEditor,Infragistics.Win.UltraWinEditors.UltraDateTimeEditor,System.Boolean,EnhancedLibrary.Utilities.Graphics.Signal)">
            <summary>
                Indicate that current depends of dependsOn Editor, with the specified signal.
            </summary>
            <param name="current">The control to verify the value</param>
            <param name="dependsOn">The control that current depends on</param>
            <param name="ignoreIfNullable">If true, the dependsOn control can have a null value that we don't compare and is considerated valid.</param>
            <param name="signal">The signal of the comparation></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.DateDependenciesValidator`1.AddDependency(Infragistics.Win.UltraWinEditors.UltraDateTimeEditor,Infragistics.Win.UltraWinEditors.UltraDateTimeEditor,EnhancedLibrary.Utilities.Graphics.Signal)">
            <summary>
                Indicate that current depends of dependsOn Editor, with the specified signal.
            </summary>
            <param name="current">The control to verify the value</param>
            <param name="dependsOn">The control that current depends on</param>
            <param name="signal">The signal of the comparation></param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.DateDependenciesValidator`1.AddDependency(Infragistics.Win.UltraWinEditors.UltraDateTimeEditor,Infragistics.Win.UltraWinEditors.UltraDateTimeEditor)">
            <summary>
                Indicate that current depends of dependsOn Editor, with the signal of equalty
            </summary>
            <param name="current">The control to verify the value</param>
            <param name="dependsOn">The control that current depends on</param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.DateDependenciesValidator`1.ValidateAll(System.Collections.Generic.IEnumerable{EnhancedLibrary.Utilities.Graphics.DependencyResult}@)">
            <summary>
                Validate all controls dependencies
            </summary>
            <param name="invalids"></param>
            <returns>true if valid, otherwise false and a list with invalid rules of validations</returns>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.Types.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Get the property name for type
            </summary>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.Types.GetChangedProperties``2(``0,``1)">
            <summary>
                Compare to instances of the same type and return the name of the properties that were changed
            </summary>
            <returns>The name of the properties where they value is different</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ICloneableExtensions.SuperficialClone``1(``0)">
            <summary>
                Clone the current obj object properties that are Valuetypes and Strings.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExceptionExtensions.PrepareMessage(System.Exception)">
            <summary>
                Format a message with tabs with the current Exception message, stacktrace and recursively
                inner exceptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnhancedLibrary.UIControls.AnimatedButton.StartAnimation">
            <summary>
                Starts the progress animation
            </summary>
        </member>
        <member name="M:EnhancedLibrary.UIControls.AnimatedButton.StopAnimation">
            <summary>
                Stops the progress animation
            </summary>
        </member>
        <member name="P:EnhancedLibrary.UIControls.AnimatedButton.Image">
            <summary>
                Get or sets the image to be displayed on button control
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions">
            <summary>
                Extends the behavior of the IEnumerable interface
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions.Iterate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Iterate over the sequence and execute callback method for each element in the sequence
            </summary>
            <returns>The same sequence, allowing you to have a fluent API</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions.Iterate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Iterate over the sequence and execute callback method for each element in the sequence
            </summary>
            <returns>The same sequence, allowing you to have a fluent API</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions.Iterate(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
                Iterate over the sequence and execute callback method for each element in the sequence
            </summary>
            <returns>The same sequence, allowing you to have a fluent API</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions.Iterate(System.Collections.IEnumerable,System.Action{System.Object,System.Int32})">
            <summary>
                Iterate over the sequence and execute callback method for each element in the sequence
            </summary>
            <returns>The same sequence, allowing you to have a fluent API</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IEnumerableExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
                Builds a string with a representation of the sequence of the current items separated by delimiter character
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IntPtrExtensions.GetProcessId(System.IntPtr)">
            <summary>
                Return the processId that is associated with the thread that created 
                the hWnd (handle of the window)
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.DataAccess.SqlDataReaderExtensions">
            <summary>
                Extends the behavior of the SqlDataReader class.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.SqlDataReaderExtensions.GetNullableString(System.Data.SqlClient.SqlDataReader,System.Int32)">
            <summary>
                Use this method, when you're getting a columnName that are of string type and are null.
                With this method, you don't receive an exception
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.DataAccess.SqlDataReaderExtensions.GetNullableString(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
                Use this method, when you're getting a columnName that are of string type and are null.
                With this method, you don't receive an exception
            </summary>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.Nullables.GetNullableValue``2(``0,``1)">
            <summary>
                Transform to a nullable type the current type, if the value is the same as the value of consideratedNullValue.
            </summary>        
        </member>
        <member name="M:EnhancedLibrary.Utilities.Business.Nullables.GetString``1(System.Nullable{``0})">
            <summary>
                Returns a string that represents the nullable value.
                If value is null, returns "", otherwise returns the ToString() of the value.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Business.IQueryableExtensions">
            <summary>
                Extends the behavior of the IQueryable Interface
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Include related entities, based on the lambda expression and materialize to objects.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IQueryableExtensions.Include``1(System.Data.Objects.ObjectQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Include related entities, based on the lambda expression and materialize to objects.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.Utilities.Graphics.AutoCallbackServiceAgent">
            <summary>
                This class provides the ability to execute some background work and after the work has been
                finished, execute a function in the context of the UI Thread.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.AutoCallbackServiceAgent.ExecuteParallel(System.Action{System.Int32})">
            <summary>
                Performs the task (parallelFunction) if no task is 
                currently executing that method.
            </summary>
            <param name="parallelFunction">A delegate that receives a token that must be passed to the FinishAsyncProcess when finished.</param>
        </member>
        <member name="M:EnhancedLibrary.Utilities.Graphics.AutoCallbackServiceAgent.FinishAsyncProcess(System.Int32,System.Delegate,System.Object[])">
            <summary>
                Indicates that task was finished.
            </summary>
            <param name="synchronizationToken">The token from ExecuteParallel method </param>
            <param name="method">The callback method that must be called with the owner of the control</param>
            <param name="methodParameters">The parameters that callback method expect</param>
        </member>
        <member name="T:EnhancedLibrary.Utilities.Business.MicrosoftExcel.ImportXls2SQL">
            <summary>
                This class provide a way to import excel file to SQL database.
                You can set the override event, that will be called for each cell, giving you the oportunity 
                to override the cellValue.
            </summary>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Business.IDictionaryExtensions">
            <summary>
                Extends the behavior of the IDictionary Interface
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.IDictionaryExtensions.ReadKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                Read the key of the dictionary, and if the key is not present on the dictionary, call
                callback function and set the key from the result of that function.
            </summary>
            <returns>The value on the specific key</returns>
        </member>
        <member name="T:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions">
            <summary>
                Extends and simplify the excel interop API
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.AddWorkBook(Microsoft.Office.Interop.Excel.Application)">
            <summary>
                Adds a new workbook to the application
            </summary>
            <param name="appEx"></param>
            <returns>The workbook added</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.OpenWorkBook(Microsoft.Office.Interop.Excel.Application,System.String)">
            <summary>
                Open a workbook from a filePath
            </summary>
            <returns>The workbook from filePath</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.SaveAs(Microsoft.Office.Interop.Excel.Workbook,System.String,Microsoft.Office.Interop.Excel.XlSaveAsAccessMode)">
            <summary>
                Saves the current workbook to specific filePath with the specific mode.
            </summary>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.GetWorkSheet(Microsoft.Office.Interop.Excel.Workbook,System.Int32)">
            <summary>
                Get the worksheet from a index
            </summary>
            <returns>The worksheet from the book based on a index (start at position 1)</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.GetCell(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32)">
            <summary>
                Get a specific cell.
            </summary>
            <returns>A range with 1 cell and 1 column</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.GetRange(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Get a specific range of cells
            </summary>
            <returns>A range with a matrix from first cell to the second cell</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.CountRows(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                Count the existing rows in the excel document
            </summary>
            <returns>The number of rows</returns>
        </member>
        <member name="M:EnhancedLibrary.ExtensionMethods.Business.ExcelExtensions.CountColumns(Microsoft.Office.Interop.Excel.Worksheet)">
            <summary>
                Count the existing columns in the excel document
            </summary>
            <returns>The number of columns</returns>
        </member>
    </members>
</doc>
